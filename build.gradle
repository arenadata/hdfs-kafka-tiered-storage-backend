/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'com.gradleup.shadow' version '8.3.5'
    id 'io.github.rmanibus.maven-settings' version '0.8'
    id 'me.qoomon.git-versioning' version '6.4.4'
}

gitVersioning.apply {
    refs {
        considerTagsOnBranches = true

        branch('release/.+') {
            describeTagFirstParent = false
            version ='${describe.tag.version.major}.${describe.tag.version.minor}.${describe.tag.version.patch.next}-SNAPSHOT'
        }

        branch('main') {
            describeTagFirstParent = false
            updateGradleProperties = true
            version = '${describe.tag.version.major}.${describe.tag.version.minor.next}.0-SNAPSHOT'
        }

        tag('v(?<version>.*)') {
            version = '${ref.version}'
        }
    }
}

allprojects {
    repositories {
        maven {
            url = uri("https://oss.sonatype.org/service/local/repositories/snapshots/content")
        }
        mavenCentral()
    }

    ext {
        aivenTieredStorageVersion = "0.0.1-SNAPSHOT"

        junitVersion = "4.13.2"

        junitJupiterVersion = "5.10.3"

        junitPlatformVersion = "1.10.3"

        mockitoVersion = "5.12.0"

        slf4jVersion = "1.7.36"

        kafkaVersion = "3.6.0"

        assertJVersion = "3.25.3"

        apacheCommonsIOVersion = "2.16.1"

        awaitilityVersion = "4.2.1"

        testcontainersVersion = "1.20.1"
    }
}

subprojects {
    java {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11

        withJavadocJar()
        withSourcesJar()
    }

    // https://docs.gradle.org/current/userguide/java_library_plugin.html
    apply plugin: "java"

    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    apply plugin: "checkstyle"

    // https://docs.gradle.org/current/userguide/jacoco_plugin.html
    apply plugin: "jacoco"

    apply plugin: "idea"

    apply plugin: "com.diffplug.spotless"

    apply plugin: "com.gradleup.shadow"

    dependencies {
        compileOnly "org.apache.kafka:kafka-clients:$kafkaVersion"
        compileOnly "org.apache.kafka:kafka-storage-api:$kafkaVersion"
        compileOnly "org.apache.kafka:kafka-storage:$kafkaVersion"

        compileOnly "org.slf4j:slf4j-api:$slf4jVersion"

        testImplementation "org.apache.kafka:kafka-clients:$kafkaVersion"
        testImplementation "org.apache.kafka:kafka-storage-api:$kafkaVersion"
        testImplementation "org.apache.kafka:kafka-storage:$kafkaVersion"

        testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
        testImplementation "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

        testImplementation "org.assertj:assertj-core:$assertJVersion"

        testImplementation "org.mockito:mockito-core:$mockitoVersion"
        testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"

        testImplementation "org.awaitility:awaitility:$awaitilityVersion"

        testRuntimeOnly "org.slf4j:slf4j-log4j12:$slf4jVersion"
    }

    checkstyle {
        toolVersion = "10.12.0"
        configDirectory = rootProject.file("checkstyle/")
    }

    tasks.named('test') {
        // Use junit platform for unit tests.
        useJUnitPlatform()
    }

    tasks.javadoc {
        // disable missing javadoc lint and show only warning and error messages
        options.addStringOption('Xdoclint:all,-missing', '-quiet')
    }

    shadowJar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        mergeServiceFiles()
    }

    spotless {
        java {
            importOrder('javax', 'java', 'org.apache.kafka', 'io.aiven', 'io.arenadata', '', '\\#')
            removeUnusedImports()
        }
    }
}

def getPublishingProperty(publishProperty) {
    return version.endsWith('SNAPSHOT')
            ? project.findProperty("snapshot${publishProperty}")
            : project.findProperty("release${publishProperty}")
}

publishing {
    repositories {
        afterEvaluate {
            maven {
                name = getPublishingProperty('ArtifactoryId')
                url = getPublishingProperty('ArtifactoryUrl')
            }
        }
    }

    publications {
        fatJar(MavenPublication) {
            from components.shadow

            afterEvaluate {
                groupId = "io.arenadata"
                artifactId = "hdfs-kafka-tiered-storage-backend"
            }
        }
    }
}

dependencies {
    // needed to create full distribution with base Aiven classes
    runtimeOnly "io.aiven:tiered-storage-for-apache-kafka-core:0.0.1-SNAPSHOT"
}

shadowJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    mergeServiceFiles()

    subprojects.each { subproject ->
        from subproject.tasks.named("shadowJar").map { it.archiveFile.get().asFile }
    }

    dependsOn jar
}
